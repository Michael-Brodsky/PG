/*
 *	This file This header is part of the C++ Standard Library type support 
 *	library.
 *
 *  ***************************************************************************
 *
 *	File: cstdint
 *	Date: September 10, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2021 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cstdint> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <stdint.h>.
 *		It defines fixed-width integer types and is part of C numeric limits 
 *		interface.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CSTDINT_
# define __PG_CSTDINT_ 20210910L

# include "pg.h"
# include <stdint.h>

# if defined __PG_HAS_NAMESPACES

namespace std
{
	using ::int8_t;
	using ::int16_t;
	using ::int32_t;
	using ::int64_t;

	using ::int_fast8_t;
	using ::int_fast16_t;
	using ::int_fast32_t;
	using ::int_fast64_t;

	using ::int_least8_t;
	using ::int_least16_t;
	using ::int_least32_t;
	using ::int_least64_t;

	using ::intmax_t;
	using ::intptr_t;

	using ::uint8_t;
	using ::uint16_t;
	using ::uint32_t;
	using ::uint64_t;

	using ::uint_fast8_t;
	using ::uint_fast16_t;
	using ::uint_fast32_t;
	using ::uint_fast64_t;

	using ::uint_least8_t;
	using ::uint_least16_t;
	using ::uint_least32_t;
	using ::uint_least64_t;

	using ::uintmax_t;
	using ::uintptr_t;
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CSTDINT_