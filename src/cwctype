/*
 *	This file is part of the C++ Standard Library C-style null-terminated
 *	wide strings library.
 *
 *  ***************************************************************************
 *
 *	File: cwctype
 *	Date: September 10, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2022 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cwctype> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <wctype.h>.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CWCTYPE_
# define __PG_CWCTYPE_ 20210910L

# include <pg.h>

# if defined __PG_HAS_NAMESPACES

#  if __PG_HAS_WCTYPE_H 
#   include <stddef.h>
#   include <wctype.h>
#  endif // __PG_HAS_WCTYPE_H

// Get rid of any conflicting macros defined in <wctype.h>.

#  undef iswalnum
#  undef iswalpha
#  if __PG_HAS_ISWBLANK
#   undef iswblank
#  endif
#  undef iswcntrl
#  undef iswctype
#  undef iswdigit
#  undef iswgraph
#  undef iswlower
#  undef iswprint
#  undef iswpunct
#  undef iswspace
#  undef iswupper
#  undef iswxdigit
#  undef towctrans
#  undef towlower
#  undef towupper
#  undef wctrans
#  undef wctype

namespace std
{
#  if __PG_USE_WCHAR_T

	using ::wctrans_t;
	using ::wctype_t;
	using ::wint_t;

	using ::iswalnum;
	using ::iswalpha;
	#if __PG_HAS_ISWBLANK
		using ::iswblank;
	#endif
	using ::iswcntrl;
	using ::iswctype;
	using ::iswdigit;
	using ::iswgraph;
	using ::iswlower;
	using ::iswprint;
	using ::iswpunct;
	using ::iswspace;
	using ::iswupper;
	using ::iswxdigit;
	using ::towctrans;
	using ::towlower;
	using ::towupper;
	using ::wctrans;
	using ::wctype

#  endif // __PG_USE_WCHAR_T 
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires C++11 and named namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CWCTYPE_