/*
 *	This file is part of the C++ Standard Library numeric library.
 *
 *  ***************************************************************************
 *
 *	File: cmath
 *	Date: September 8, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2021 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cmath> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <math.h>.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CMATH_
# define __PG_CMATH_ 20210908L

# include "pg.h"
# include <math.h>

# if defined __PG_HAS_NAMESPACES

// Get rid of any conflicting macros defined in <math.h>.

#undef abs
#undef acos
#undef asin
#undef atan
#undef atan2
#undef ceil
#undef cos
#undef cosh
#undef exp
#undef fabs
#undef floor
#undef fmod
#undef frexp
#undef ldexp
#undef log
#undef log10
#undef modf
#undef pow
#undef sin
#undef sinh
#undef sqrt
#undef tan
#undef tanh

// Arduino may not define these.

#if !defined HUGE_VALF 
# define HUGE_VALF	((float)0)
#endif
#if !defined HUGE_VAL 
# define HUGE_VAL	((double)0)
#endif
#if !defined HUGE_VALL
# define HUGE_VALL	((long double)0)
#endif

namespace std {

	using ::acos;
	using ::asin;
	using ::atan;
	using ::atan2;
	using ::ceil;
	using ::cos;
	using ::copysign;
	using ::cosh;
	using ::exp;
	using ::fabs;
	using ::floor;
	using ::fmod;
	using ::frexp;
	using ::isfinite;
	using ::ldexp;
	using ::log;
	using ::log10;
	using ::modf;
	using ::pow;
	using ::sin;
	using ::sinh;
	using ::sqrt;
	using ::tan;
	using ::tanh;

# if !defined __CORRECT_ISO_CPP_MATH_H_PROTO

	inline float abs(float x) 
	{
		return fabsf(x);
	}

	inline float acos(float x) 
	{
		return acosf(x);
	}

	inline float asin(float x) 
	{
		return asinf(x);
	}

	inline float atan(float x) 
	{
		return atanf(x);
	}

	inline float atan2(float y, float x) 
	{
		return atan2f(y, x);
	}

	inline float ceil(float x) 
	{
		return ceilf(x);
	}

	inline float cos(float x) 
	{
		return cosf(x);
	}

	inline float cosh(float x) 
	{
		return coshf(x);
	}

	inline float exp(float x) 
	{
		return expf(x);
	}

	inline float fabs(float x) 
	{
		return fabsf(x);
	}

	inline float floor(float x) 
	{
		return floorf(x);
	}

	inline float fmod(float x, float y) 
	{
		return fmodf(x, y);
	}

	inline float frexp(float x, int* exp) 
	{
		return frexpf(x, exp);
	}

	inline float ldexp(float x, int exp) 
	{
		return ldexpf(x, exp);
	}

	inline float log(float x) 
	{
		return logf(x);
	}

	inline float log10(float x) 
	{
		return log10f(x);
	}

	inline float modf(float x, float* inptr) 
	{
		return modff(x, inptr);
	}

	inline float pow(float x, float y) 
	{
		return powf(x, y);
	}

	inline float sin(float x) 
	{
		return sinf(x);
	}

	inline float sinh(float x) 
	{
		return sinhf(x);
	}

	inline float sqrt(float x) 
	{
		return sqrtf(x);
	}

	inline float tan(float x) 
	{
		return tanf(x);
	}

	inline float tanh(float x) 
	{
		return tanhf(x);
	}

	inline double abs(double x) 
	{
		return fabs(x);
	}

	inline double pow(double x, int y) 
	{
		return pow((double)x, (double)y);
	}

#endif	//	 __CORRECT_ISO_CPP_MATH_H_PROTO
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CMATH_