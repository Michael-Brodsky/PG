/*
 *	This file is part of the C++ Standard Library numeric library.
 *
 *  ***************************************************************************
 *
 *	File: cmath
 *	Date: September 8, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2021 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cmath> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <math.h>.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CMATH_
# define __PG_CMATH_ 20210908L

# include "pg.h"
# include <math.h>

# if defined __PG_HAS_NAMESPACES

// Get rid of any conflicting macros defined in <math.h>.

#undef abs
#undef acos
#undef asin
#undef atan
#undef atan2
#undef cbrt
#undef ceil
#undef cos
#undef cosh
#undef exp
#undef fabs
#undef floor
#undef fdim
#undef fma
#undef fmax
#undef fmin
#undef fmod
#undef frexp
#undef hypot
#undef isinf
#undef isnan
#undef ldexp
#undef log
#undef log10
#undef lrint
#undef lround
#undef modf
#undef pow
#undef round
#undef signbit
#undef sin
#undef sinh
#undef sqrt
#undef sqrtf
#undef tan
#undef tanh
#undef trunc

// Arduino may not define these.

#if !defined HUGE_VALF 
# define HUGE_VALF	((float)NAN) // needs a better def, but can't find one in the docs.
#endif
#if !defined HUGE_VAL 
# define HUGE_VAL	((double)NAN)
#endif
#if !defined HUGE_VALL
# define HUGE_VALL	((long double)NAN)
#endif

namespace std {

	using ::acos;
	using ::asin;
	using ::atan;
	using ::atan2;
	using ::cbrt;
	using ::ceil;
	using ::cos;
	using ::copysign;
	using ::cosh;
	using ::exp;
	using ::fabs;
	using ::fdim;
	using ::floor;
	using ::fma;
	using ::fmax;
	using ::fmin;
	using ::fmod;
	using ::frexp;
	using ::hypot;
	using ::isfinite;
	using ::isinf;
	using ::isnan;
	using ::ldexp;
	using ::log;
	using ::log10;
	using ::lrint;
	using ::lround;
	using ::modf;
	using ::pow;
	using ::round;
	using ::signbit;
	using ::sin;
	using ::sinh;
	using ::sqrt;
	using ::sqrtf;
	using ::tan;
	using ::tanh;
	using ::trunc;

# if !defined __CORRECT_ISO_CPP_MATH_H_PROTO

	// As of Arduino 1.8, only some of these are required.

	//inline float abs(float x) 
	//{
	//	return fabs(static_cast<double>(x));
	//}

	//inline double abs(double x) 
	//{
	//	return fabs(x);
	//}

	inline float modf(float x, float* inptr) 
	{
		return modff(x, inptr);
	}

#endif	//	 __CORRECT_ISO_CPP_MATH_H_PROTO

} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CMATH_