/*
 *	This file is part of the C++ Standard Library C-style program support
 *	library.
 *
 *  ***************************************************************************
 *
 *	File: csignal
 *	Date: September 8, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2021 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <csignal> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <signal.h>.
 *		Signal / raise functions are not implemented by the Arduino, so these 
 *		are for compatibility only.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CSIGNAL_
# define __PG_CSIGNAL_ 20210908L

# include "pg.h"
# include <signal.h>

# if defined __PG_HAS_NAMESPACES

// Signals defined by the Standard, but not defined by the Arduino implementation.

# if !defined SIGTERM 
#  define SIGTERM 15	// termination request, sent to the program.
# endif // !defined SIGTERM
# if !defined SIGSEGV 
#  define SIGSEGV 11	// invalid memory access (segmentation fault).
# endif // !defined SIGSEGV
# if !defined SIGFPE 
#  define SIGFPE 8		// erroneous arithmetic operation such as divide by zero.
# endif // !defined SIGFPE
# if !defined SIGABRT 
#  define SIGABRT 6		// abnormal termination condition.
# endif // !defined SIGABRT
# if !defined SIGILL 
#  define SIGILL 4		// invalid program image, such as invalid instruction.
# endif // !defined SIGILL
# if !defined SIGINT 
#  define SIGINT 2		// external interrupt, usually initiated by the user.
# endif // !defined SIGINT

namespace std
{
	using ::sig_atomic_t;	// Integer type that can be accessed as an atomic entity from an asynchronous signal handler.
	using ::signal;			// Sets a signal handler for particular signal.
	using ::raise;			// Runs the signal handler for particular signal
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CSIGNAL_
