/*
 *	This file is part of the C++ Standard Library null-terminated byte strings 
 *	library.
 *
 *  ***************************************************************************
 *
 *	File: cstring
 *	Date: September 8, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2021 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cstring> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <string.h>. 
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CSTRING_
# define __PG_CSTRING_ 20210908L

# include "pg.h"
# if defined ARDUINO_ARCH_MEGAAVR
#  include "lib/string.h"	// No avr-libc for megaavr boards, so use our own.
# else
#  include <string.h>
# endif
# if defined __PG_HAS_NAMESPACES

 // Get rid of any conflicting macros defined in <string.h>.

# undef memchr
# undef memcmp
# undef memcpy
# undef memmove
# undef memset
# undef strcat
# undef strchr
# undef strcmp
# undef strcoll
# undef strcpy
# undef strcspn
# undef strerror
# undef strlen
# undef strncat
# undef strncmp
# undef strncpy
# undef strpbrk
# undef strrchr
# undef strspn
# undef strstr
# undef strtok
# undef strxfrm

namespace std 
{
#  if !defined ARDUINO_ARCH_MEGAAVR
	using ::memchr;
	using ::memcmp;
	using ::memcpy;
	using ::memmove;
	using ::memset;
	using ::strcat;
	using ::strchr;
	using ::strcmp;
	using ::strcoll;
	using ::strcpy;
	using ::strcspn;
	using ::strerror;
	using ::strlen;
	using ::strncat;
	using ::strncmp;
	using ::strncpy;
	using ::strpbrk;
	using ::strrchr;
	using ::strspn;
	using ::strstr;
	using ::strtok;
	using ::strxfrm;
#  else
	/* Megaavr architecture lacks an ANSI/ISO <string.h> */
	/* These are defined by pg in <lib/string.h> */
	using ::memchr;
	using ::memcmp;
	using ::strcat;
	using ::strchr;
	using ::strlen;
	using ::strncat;
	using ::strncmp;
	using ::strncpy;
	using ::strpbrk;
	using ::strrchr;
	using ::strspn;
	using ::strstr;
	using ::strtok;
#  endif

#  if !(defined __CORRECT_ISO_CPP_STRING_H_PROTO || defined ARDUINO_ARCH_MEGAAVR) 
	/* The megaavr arcitecture string.h prototypes are not ISO compliant. */
	/* (see e.g. 7.3.0-atmel3.6.1-arduino7\avr\include\string.h) */

	inline void* memchr(void* s, int c, size_t n) {
		return memchr(const_cast<const void*>(s), c, n);
	}

	inline char* strchr(char* s, int c) {
		return strchr(const_cast<const char*>(s), c);
	}

	inline char* strpbrk(char* s1, const char* s2) {
		return strpbrk(const_cast<const char*>(s1), s2);
	}

	inline char* strrchr(char* s, int c) {
		return strrchr(const_cast<const char*>(s), c);
	}

	inline char* strstr(char* s1, const char* s2) {
		return strstr(const_cast<const char*>(s1), s2);
	}

# endif // !defined __CORRECT_ISO_CPP_STRING_H_PROTO
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CSTRING_