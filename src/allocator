/*
 *  This file defines a minimal C++11 allocator class.
 *
 *  ***************************************************************************
 *
 *  File: allocator
 *  Date: February 17, 2025
 *  Version: 1.0
 *  Author: Michael Brodsky
 *  Email: mbrodskiis@gmail.com
 *  Copyright (c) 2012-2025 Michael Brodsky
 *
 *  ***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *  you can redistribute it and/or modify it under the terms of the
 *  GNU General Public License as published by the Free Software Foundation,
 *  either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this file. If not, see <http://www.gnu.org/licenses/>.
 * 
 *  ***************************************************************************/

#if !defined __PG_ALLOCATOR_
# define __PG_ALLOCATOR_ 20250217L

#include <pg.h>
#include <cstddef>

# if defined __PG_HAS_NAMESPACES

namespace std
{
  template <class T>
  struct allocator
  {
    using value_type = T;
  
    allocator() = default;
    template <class U>
    allocator(const allocator<U>&) noexcept {}
  
    T* allocate(std::size_t n) 
    {
      void* p = ::operator new(n * sizeof(T));
  
      return static_cast<T*>(p);
    }
  
    void deallocate(T* p, std::size_t n) 
    {
      ::operator delete(p);
    }
  };
  
  template <class T, class U>
  bool operator==(const allocator<T>&, const allocator<U>&)
  {
    return true;
  }
  
  template <class T, class U>
  bool operator!=(const allocator<T>&, const allocator<U>&)
  {
    return false;
  }
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error Requires C++11 and namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_ALLOCATOR_
