/*
 *	This file defines several types and functions in the C++ Standard Library  
 *	general utility library.
 *
 *	***************************************************************************
 *
 *	File: utility
 *	Date: September 3, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2021 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	***************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <utility> header of the C++ Standard
 *		Standard Library - to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	**************************************************************************/

#if !defined __PG_UTILITY_
# define __PG_UTILITY_ 20210903L

# include "tuple"	// Needed to specialize std::tuple primary templates.

# if defined __PG_HAS_NAMESPACES

namespace std
{
	template<class T1, class T2>
	struct pair;

	// Forwards lvalues as either lvalues or as rvalues, depending on T.
	template <class T>
	inline T&& forward(typename std::remove_reference<T>::type& t)
	{
		return static_cast<T&&>(t);
	}

	// Forwards rvalues as rvalues and prohibits forwarding of rvalues as lvalues.
	template <class T>
	inline T&& forward(typename std::remove_reference<T>::type&& t)
	{
		return static_cast<T&&>(t);
	}

	// Used to indicate that an object t may be "moved from" t to another object.
	template <class T>
	inline typename std::remove_reference<T>::type&& 
		move(T&& t)
	{
		return static_cast<typename remove_reference<T>::type&&>(t);
	}

	// Exchanges the given values a and b.
	template<class T>
	void swap(T& a, T& b)
	{
		T tmp(std::move(a));
		a = std::move(b);
		b = std::move(tmp);
	}

	// Swaps the elements of array a with those of b.
	template<class T, std::size_t N>
	void swap(T(&a)[N], T(&b)[N])
	{
		if (a != b) {
			std::size_t i = 0;
			while (i < N)
			{
				std::swap(a[i], b[i]);
				++i;
			}
		}
	}

	// std::piecewise_construct_t is an empty class tag type used to disambiguate between 
	// different functions that take two tuple arguments.
	struct piecewise_construct_t { explicit piecewise_construct_t() = default; };

	// The constant std::piecewise_construct is an instance of an empty struct tag type 
	// std::piecewise_construct_t.
	constexpr piecewise_construct_t piecewise_construct{};

	// Class template std::pair provides a way to store two heterogeneous objects as a single unit.
	template<class T1, class T2>
	struct pair
	{
		using self_type = pair<T1, T2>;
		using first_type = T1;
		using second_type = T2;

		// Default constructor.
		pair() = default;
		// Value initialize constructor (copy semantics).
		pair(const T1& x, const T2& y) : first(x), second(y) {}
		// Value initialize constructor (move semantics).
		template<class U1, class U2>
		pair(U1&& x, U2&& y) : first(std::forward<U1>(x)), second(std::forward<U2>(y)) {}
		// Copy constructor.
		template< class U1, class U2 >
		pair(const pair<U1, U2>& p) : first(p.first), second(p.second) {}
		// Move constructor.
		template< class U1, class U2 >
		pair(pair<U1, U2>&& p) : first(std::move(p.first)), second(std::move(p.second)) {}
		// Forwards the elements of first_args to the constructor of first and 
		// the elements of second_args to the constructor of second.
		template<class... Args1, class... Args2>
		pair(std::piecewise_construct_t,
			std::tuple<Args1...> first_args,
			std::tuple<Args2...> second_args) : 
				first(std::forward<Args1...>(first_args)), second(std::forward<Args2...>(second_args)) {}
		// Copy constructor.
		pair(const pair& p) = default;
		// Move constructor.
		pair(pair&& p) = default;

		// Swaps the contents with another pair.
		void swap(self_type& rhs)
		{
			if (this != &rhs)
			{
				std::swap(first, rhs.first);
				std::swap(second, rhs.second);
			}
		}

		// Copy assignment operator. Replaces the contents with a copy of the contents of other.
		pair& operator=(const pair& other)
		{
			first = other.first;
			second = other.second;
			return *this;
		}

		// Copy assignment operator. Replaces the contents with a copy of the contents of other.
		template<class U1, class U2>
		pair& operator=(const pair<U1, U2>& other)
		{
			first = other.first;
			second = other.second;
			return *this;
		}

		// Move assignment operator. Replaces the contents with those of other using move semantics.
		pair& operator=(pair&& other) noexcept
		{
			first = std::move(other.first);
			second = std::move(other.second);
			return *this;
		}

		// Move assignment operator. Replaces the contents with those of other using move semantics.
		template<class U1, class U2>
		pair& operator=(pair<U1, U2>&& other)
		{
			first = std::forward<U1>(other.first);
			second = std::forward<U2>(other.second);
			return *this;
		}

		T1 first;
		T2 second;
	};

	// Specialization of the std::swap algorithm for std::pair.
	template<class T1, class T2>
	inline void swap(pair<T1, T2>& lhs, pair<T1, T2>& rhs)
	{
		lhs.swap(rhs);
	}

	// Specialization of std::tuple_element<0> for std::pair
	template <class T1, class T2> 
	struct tuple_element <0, pair<T1, T2>>
	{
		using type = T1;
	};

	// Specialization of std::tuple_element<1> for std::pair
	template <class T1, class T2> 
	struct tuple_element <1, pair<T1, T2>>
	{
		using type = T2;
	};

	// Specialization of std::get for std::pair.
	template <size_t N, class T1, class T2>
	typename std::tuple_element<N, pair<T1, T2> >::type&
		get(pair<T1, T2>& pr) noexcept
	{
		// Type cast to void* required so gcc doesn't complain.
		void* p = N == 0 
			? static_cast<void*>(&pr.first)
			: static_cast<void*>(&pr.second);

		// Return the derefrenced pointer cast back to the appropriate return type.
		return *static_cast<typename std::tuple_element<N, pair<T1, T2> >::type*>(p);
	}

	// Specialization of std::get for std::pair.
	template <size_t N, class T1, class T2>
	const typename std::tuple_element<N, pair<T1, T2> >::type
		get(const pair<T1, T2>& pr) noexcept
	{
		auto value = N == 0 
			? pr.first 
			: pr.second;

		return value;
	}

	// Specialization of std::get for std::pair.
	template <size_t N, class T1, class T2>
	typename tuple_element< N, pair<T1, T2> >::type&& 
		get(pair<T1, T2>&& pr) noexcept
	{
		auto value = N == 0 
			? pr.first 
			: pr.second;

		return std::forward<typename tuple_element<N, pair<T1, T2>>::type>(value);
	}

	// Specialization of std::tuple_size for std::pair.
	template <class T1, class T2>
	struct tuple_size<std::pair<T1, T2>>
		: std::integral_constant<std::size_t, 2> 
	{};

	// Tests if both elements of lhs and rhs are equal.
	template<class T1, class T2>
	inline bool operator==(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
	{
		return lhs.first == rhs.first && lhs.second == rhs.second;
	}

	// Tests if either elements of lhs and rhs are not equal.
	template<class T1, class T2>
	inline bool operator!=(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
	{
		return !(lhs == rhs);
	}

	// Compares lhs and rhs lexicographically by operator<.
	template<class T1, class T2>
	inline bool operator<(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
	{
		return (lhs.first < rhs.first ||
			!(rhs.first < lhs.first) && lhs.second < rhs.second);
	}

	// Compares lhs and rhs lexicographically by operator<.
	template<class T1, class T2>
	inline bool operator>(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
	{
		return rhs < lhs;
	}

	// Compares lhs and rhs lexicographically by operator<.
	template<class T1, class T2>
	inline bool operator<=(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
	{
		return !(rhs < lhs);
	}

	// Compares lhs and rhs lexicographically by operator<.
	template<class T1, class T2>
	inline bool operator>=(const pair<T1, T2>& lhs, const pair<T1, T2>& rhs)
	{
		return !(lhs < rhs);
	}

	// Creates a std::pair object, deducing the target type from the types of arguments.
	template< class T1, class T2 >
	pair<T1, T2> make_pair(T1 t1, T2 t2)
	{
		return (pair<T1, T2>(t1, t2));
	}

	// These functions implements the usual semantics of other comparison operators 
	// given a user-defined operator== and operator< for objects of type T.
	namespace rel_ops
	{
		// Implements operator!= in terms of operator==.
		template<class T>
		bool operator!=(const T& lhs, const T& rhs)
		{
			return !(lhs == rhs);
		}

		// Implements operator> in terms of operator<.
		template<class T>
		bool operator>(const T& lhs, const T& rhs)
		{
			return rhs < lhs;
		}

		// Implements operator<= in terms of operator<.
		template<class T>
		bool operator<=(const T& lhs, const T& rhs)
		{
			return !(rhs < lhs);
		}

		// Implements operator>= in terms of operator<.
		template<class T>
		bool operator>=(const T& lhs, const T& rhs)
		{
			return !(lhs < rhs);
		}
	}
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error Requires C++11 and namespace support.
# endif // defined __PG_HAS_NAMESPACES
#endif // !defined __PG_UTILITY_