/*
 *	This file defines objects in the C++ Standard Library numeric library.
 *	
 *	***************************************************************************
 *
 *	File: numbers
 *	Date: September 14, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2022 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <numbers> header of the C++ Standard 
 *		Library - to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This implementation provides the Standard mathematical constants as 
 *		well as several common constants not defined by the Standard.
 *
 *	**************************************************************************/

#if !defined __PG_NUMBERS_
# define __PG_NUMBERS_ 20210914L

#include <pg.h>
#include <lib/constants.h>

# if defined __PG_HAS_NAMESPACES

namespace std
{
	namespace numbers
	{

#if defined __PG_HAS_CPP14

		template <class T, class U = T>
		struct is_float
		{
			using type = typename std::enable_if<std::is_floating_point<T>::value, U>::type;
		};

		template<class T>
		using enable_if_fp = typename is_float<T>::type;

		template<class T> inline constexpr T e_v = enable_if_fp<T>(PG_E);
		template<class T> inline constexpr T log2e_v = enable_if_fp<T>(PG_LOG2E);
		template<class T> inline constexpr T log10e_v = enable_if_fp<T>(PG_LOG10E);
		template<class T> inline constexpr T pi_v = enable_if_fp<T>(PG_PI);
		template<class T> inline constexpr T inv_pi_v = enable_if_fp<T>(PG_1_PI);
		template<class T> inline constexpr T inv_sqrtpi_v = enable_if_fp<T>(PG_1_SQRTPI);
		template<class T> inline constexpr T ln2_v = enable_if_fp<T>(PG_LN2);
		template<class T> inline constexpr T ln10_v = enable_if_fp<T>(PG_LN10);
		template<class T> inline constexpr T sqrt2_v = enable_if_fp<T>(PG_SQRT2);
		template<class T> inline constexpr T sqrt3_v = enable_if_fp<T>(PG_SQRT3);
		template<class T> inline constexpr T inv_sqrt3_v = enable_if_fp<T>(PG_SQRT3_3);
		template<class T> inline constexpr T egamma_v = enable_if_fp<T>(PG_GAMMA);
		template<class T> inline constexpr T phi_v = enable_if_fp<T>(PG_PHI);

		constexpr double e = e_v<double>;
		constexpr double log2e = log2e_v<double>;
		constexpr double log10e = log10e_v<double>;
		constexpr double pi = pi_v<double>;
		constexpr double inv_pi = inv_pi_v<double>;
		constexpr double inv_sqrtpi = inv_sqrtpi_v<double>;
		constexpr double ln2 = ln2_v<double>;
		constexpr double ln10 = ln10_v<double>;
		constexpr double sqrt2 = sqrt2_v<double>;
		constexpr double sqrt3 = sqrt3_v<double>;
		constexpr double inv_sqrt3 = inv_sqrt3_v<double>;
		constexpr double egamma = egamma_v<double>;
		constexpr double phi = phi_v<double>;

		/* Common constants not defined by the Standard. */

		template<class T> inline constexpr T two_pi_v = enable_if_fp<T>(PG_2PI);
		template<class T> inline constexpr T pi_two_v = enable_if_fp<T>(PG_PI_2);
		template<class T> inline constexpr T pi_three_v = enable_if_fp<T>(PG_PI_3);
		template<class T> inline constexpr T pi_four_v = enable_if_fp<T>(PG_PI_4);
		template<class T> inline constexpr T pi_five_v = enable_if_fp<T>(PG_PI_5);
		template<class T> inline constexpr T pi_six_v = enable_if_fp<T>(PG_PI_6);
		template<class T> inline constexpr T pi_seven_v = enable_if_fp<T>(PG_PI_7);
		template<class T> inline constexpr T pi_eight_v = enable_if_fp<T>(PG_PI_8);
		template<class T> inline constexpr T pi_nine_v = enable_if_fp<T>(PG_PI_9);
		template<class T> inline constexpr T pi_ten_v = enable_if_fp<T>(PG_PI_10);
		template<class T> inline constexpr T pi_twelve_v = enable_if_fp<T>(PG_PI_12);
		template<class T> inline constexpr T pi_fifteen_v = enable_if_fp<T>(PG_PI_15);
		template<class T> inline constexpr T pi_sixteen_v = enable_if_fp<T>(PG_PI_16);
		template<class T> inline constexpr T pi_eighteen_v = enable_if_fp<T>(PG_PI_18);
		template<class T> inline constexpr T pi_twenty_v = enable_if_fp<T>(PG_PI_20);
		template<class T> inline constexpr T pi_twentyfour_v = enable_if_fp<T>(PG_PI_24);
		template<class T> inline constexpr T pi_thirtytwo_v = enable_if_fp<T>(PG_PI_32);
		template<class T> inline constexpr T two_inv_pi_v = enable_if_fp<T>(PG_2_PI);
		template<class T> inline constexpr T pi_sqr_v = enable_if_fp<T>(PG_PI2);
		template<class T> inline constexpr T inv_sqrt_pi_v = enable_if_fp<T>(PG_1_SQRTPI);

		template<class T> inline constexpr T sqrte_v = enable_if_fp<T>(PG_SQRTE);
		template<class T> inline constexpr T sqrtpi_v = enable_if_fp<T>(PG_SQRTPI);
		template<class T> inline constexpr T sqrt2pi_v = enable_if_fp<T>(PG_SQRT2PI);
		template<class T> inline constexpr T two_sqrtpi_inv_pi_v = enable_if_fp<T>(PG_2SQRTPI_PI);
		template<class T> inline constexpr T inv_sqrt2_v = enable_if_fp<T>(PG_SQRT2_2);
		template<class T> inline constexpr T sqrt3_inv_two_v = enable_if_fp<T>(PG_SQRT3_2);
		template<class T> inline constexpr T sqrt5_v = enable_if_fp<T>(PG_SQRT5);
		template<class T> inline constexpr T three_root2_v = enable_if_fp<T>(PG_3ROOT2);
		template<class T> inline constexpr T twelve_root2_v = enable_if_fp<T>(PG_12ROOT2);

		template<class T> inline constexpr T inv_e_v = enable_if_fp<T>(PG_1_E);
		template<class T> inline constexpr T esqr_v = enable_if_fp<T>(PG_EXP2);
		template<class T> inline constexpr T inv_esqr_v = enable_if_fp<T>(PG_1_EXP2);

		template<class T> inline constexpr T ln_01_v = enable_if_fp<T>(PG_LN_01);
		template<class T> inline constexpr T lnpi_v = enable_if_fp<T>(PG_LNPI);
		template<class T> inline constexpr T log10pi_v = enable_if_fp<T>(PG_LOG10PI);
		template<class T> inline constexpr T log10_two_v = enable_if_fp<T>(PG_LOG10_2);

		template<class T> inline constexpr T k_v = enable_if_fp<T>(PG_K);
		template<class T> inline constexpr T q_v = enable_if_fp<T>(PG_Q);
		template<class T> inline constexpr T n_v = enable_if_fp<T>(PG_N);
		template<class T> inline constexpr T h_v = enable_if_fp<T>(PG_H);
		template<class T> inline constexpr T g_v = enable_if_fp<T>(PG_G);
		template<class T> inline constexpr T beta2_v = enable_if_fp<T>(PG_BETA2);
		template<class T> inline constexpr T zeta3_v = enable_if_fp<T>(PG_ZETA3);
		template<class T> inline constexpr T omega_v = enable_if_fp<T>(PG_OMEGA);

		constexpr double two_pi = two_pi_v<double>;
		constexpr double pi_two = pi_two_v<double>;
		constexpr double pi_three = pi_three_v<double>;
		constexpr double pi_four = pi_four_v<double>;
		constexpr double pi_five = pi_five_v<double>;
		constexpr double pi_six = pi_seven_v<double>;
		constexpr double pi_seven = pi_seven_v<double>;
		constexpr double pi_eight = pi_eight_v<double>;
		constexpr double pi_nine = pi_nine_v<double>;
		constexpr double pi_ten = pi_ten_v<double>;
		constexpr double pi_twelve = pi_twelve_v<double>;
		constexpr double pi_fifteen = pi_fifteen_v<double>;
		constexpr double pi_sixteen = pi_sixteen_v<double>;
		constexpr double pi_eighteen = pi_eighteen_v<double>;
		constexpr double pi_twenty = pi_twenty_v<double>;
		constexpr double pi_twentyfour = pi_twentyfour_v<double>;
		constexpr double pi_thirtytwo = pi_thirtytwo_v<double>;
		constexpr double two_inv_pi = two_inv_pi_v<double>;
		constexpr double pi_sqr = pi_sqr_v<double>;
		constexpr double sqrte = sqrte_v<double>;
		constexpr double sqrtpi = sqrtpi_v<double>;
		constexpr double sqrt2pi = sqrt2pi_v<double>;
		constexpr double two_sqrtpi_inv_pi = two_sqrtpi_inv_pi_v<double>;
		constexpr double inv_sqrt2 = inv_sqrt2_v<double>;
		constexpr double sqrt3_inv_two = sqrt3_inv_two_v<double>;
		constexpr double sqrt5 = sqrt5_v<double>;
		constexpr double three_root2 = three_root2_v<double>;
		constexpr double twelve_root2 = twelve_root2_v<double>;
		constexpr double inv_e = inv_e_v<double>;
		constexpr double esqr = esqr_v<double>;
		constexpr double inv_esqr = inv_esqr_v<double>;
		constexpr double ln_01 = ln_01_v<double>;
		constexpr double lnpi = lnpi_v<double>;
		constexpr double log10pi = log10pi_v<double>;
		constexpr double log10_two = log10_two_v<double>;
		constexpr double k = k_v<double>;
		constexpr double q = q_v<double>;
		constexpr double n = n_v<double>;
		constexpr double h = h_v<double>;
		constexpr double g = g_v<double>;
		constexpr double beta2 = beta2_v<double>;
		constexpr double zeta3 = zeta3_v<double>;
		constexpr double omega = omega_v<double>;

#else // !defined __PG_HAS_CPP14

		constexpr double e_v = (PG_E);
		constexpr double log2e_v = (PG_LOG2E);
		constexpr double log10e_v = (PG_LOG10E);
		constexpr double pi_v = (PG_PI);
		constexpr double inv_pi_v = (PG_1_PI);
		constexpr double inv_sqrtpi_v = (PG_1_SQRTPI);
		constexpr double ln2_v = (PG_LN2);
		constexpr double ln10_v = (PG_LN10);
		constexpr double sqrt2_v = (PG_SQRT2);
		constexpr double sqrt3_v = (PG_SQRT3);
		constexpr double inv_sqrt3_v = (PG_SQRT3_3);
		constexpr double egamma_v = (PG_GAMMA);
		constexpr double phi_v = (PG_PHI);

		constexpr double e = e_v;
		constexpr double log2e = log2e_v;
		constexpr double log10e = log10e_v;
		constexpr double pi = pi_v;
		constexpr double inv_pi = inv_pi_v;
		constexpr double inv_sqrtpi = inv_sqrtpi_v;
		constexpr double ln2 = ln2_v;
		constexpr double ln10 = ln10_v;
		constexpr double sqrt2 = sqrt2_v;
		constexpr double sqrt3 = sqrt3_v;
		constexpr double inv_sqrt3 = inv_sqrt3_v;
		constexpr double egamma = egamma_v;
		constexpr double phi = phi_v;

		/* Common constants not defined by the Standard. */

		constexpr double two_pi_v = (PG_2PI);
		constexpr double pi_inv_two_v = (PG_PI_2);
		constexpr double pi_inv_three_v = (PG_PI_3);
		constexpr double pi_inv_four_v = (PG_PI_4);
		constexpr double pi_inv_five_v = (PG_PI_5);
		constexpr double pi_inv_six_v = (PG_PI_6);
		constexpr double pi_inv_seven_v = (PG_PI_7);
		constexpr double pi_inv_eight_v = (PG_PI_8);
		constexpr double pi_inv_nine_v = (PG_PI_9);
		constexpr double pi_inv_ten_v = (PG_PI_10);
		constexpr double pi_inv_twelve_v = (PG_PI_12);
		constexpr double pi_inv_fifteen_v = (PG_PI_15);
		constexpr double pi_inv_sixteen_v = (PG_PI_16);
		constexpr double pi_inv_eighteen_v = (PG_PI_18);
		constexpr double pi_inv_twenty_v = (PG_PI_20);
		constexpr double pi_inv_twentyfour_v = (PG_PI_24);
		constexpr double pi_inv_thirtytwo_v = (PG_PI_32);
		constexpr double two_inv_pi_v = (PG_2_PI);
		constexpr double pi_sqr_v = (PG_PI2);
		constexpr double inv_sqrt_pi_v = (PG_1_SQRTPI);

		constexpr double sqrte_v = (PG_SQRTE);
		constexpr double sqrtpi_v = (PG_SQRTPI);
		constexpr double sqrt2pi_v = (PG_SQRT2PI);
		constexpr double two_sqrtpi_inv_pi_v = (PG_2SQRTPI_PI);
		constexpr double inv_sqrt2_v = (PG_SQRT2_2);
		constexpr double sqrt3_inv_two_v = (PG_SQRT3_2);
		constexpr double sqrt5_v = (PG_SQRT5);
		constexpr double three_root2_v = (PG_3ROOT2);
		constexpr double twelve_root2_v = (PG_12ROOT2);

		constexpr double inv_e_v = (PG_1_E);
		constexpr double esqr_v = (PG_EXP2);
		constexpr double inv_esqr_v = (PG_1_EXP2);

		constexpr double ln_01_v = (PG_LN_01);
		constexpr double lnpi_v = (PG_LNPI);
		constexpr double log10pi_v = (PG_LOG10PI);
		constexpr double log10_two_v = (PG_LOG10_2);

		constexpr double k_v = (PG_K);
		constexpr double q_v = (PG_Q);
		constexpr double n_v = (PG_N);
		constexpr double h_v = (PG_H);
		constexpr double g_v = (PG_G);
		constexpr double beta2_v = (PG_BETA2);
		constexpr double zeta3_v = (PG_ZETA3);
		constexpr double omega_v = (PG_OMEGA);

		constexpr double two_pi = two_pi_v;
		constexpr double pi_inv_two = pi_inv_two_v;
		constexpr double pi_inv_three = pi_inv_three_v;
		constexpr double pi_inv_four = pi_inv_four_v;
		constexpr double pi_inv_five = pi_inv_five_v;
		constexpr double pi_inv_six = pi_inv_seven_v;
		constexpr double pi_inv_seven = pi_inv_seven_v;
		constexpr double pi_inv_eight = pi_inv_eight_v;
		constexpr double pi_inv_nine = pi_inv_nine_v;
		constexpr double pi_inv_ten = pi_inv_ten_v;
		constexpr double pi_inv_twelve = pi_inv_twelve_v;
		constexpr double pi_inv_fifteen = pi_inv_fifteen_v;
		constexpr double pi_inv_sixteen = pi_inv_sixteen_v;
		constexpr double pi_inv_eighteen = pi_inv_eighteen_v;
		constexpr double pi_inv_twenty = pi_inv_twenty_v;
		constexpr double pi_inv_twentyfour = pi_inv_twentyfour_v;
		constexpr double pi_inv_thirtytwo = pi_inv_thirtytwo_v;
		constexpr double two_inv_pi = two_inv_pi_v;
		constexpr double pi_sqr = pi_sqr_v;
		constexpr double sqrte = sqrte_v;
		constexpr double sqrtpi = sqrtpi_v;
		constexpr double sqrt2pi = sqrt2pi_v;
		constexpr double two_sqrtpi_inv_pi = two_sqrtpi_inv_pi_v;
		constexpr double inv_sqrt2 = inv_sqrt2_v;
		constexpr double sqrt3_inv_two = sqrt3_inv_two_v;
		constexpr double sqrt5 = sqrt5_v;
		constexpr double three_root2 = three_root2_v;
		constexpr double twelve_root2 = twelve_root2_v;
		constexpr double inv_e = inv_e_v;
		constexpr double esqr = esqr_v;
		constexpr double inv_esqr = inv_esqr_v;
		constexpr double ln_01 = ln_01_v;
		constexpr double lnpi = lnpi_v;
		constexpr double log10pi = log10pi_v;
		constexpr double log10_two = log10_two_v;
		constexpr double k = k_v;
		constexpr double q = q_v;
		constexpr double n = n_v;
		constexpr double h = h_v;
		constexpr double g = g_v;
		constexpr double beta2 = beta2_v;
		constexpr double zeta3 = zeta3_v;
		constexpr double omega = omega_v;

#endif // defined __PG_HAS_CPP14

	} // namespace numbers
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error Requires C++11 and namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_NUMBERS_