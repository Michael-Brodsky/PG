/*
 *	This file is part of the C++ Standard Library that provides miscellaneous 
 *	utilities.
 *
 *  ***************************************************************************
 *
 *	File: cstdlib
 *	Date: September 8, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2022 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cstdlib> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <stdlib.h>.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CSTDLIB_
# define __PG_CSTDLIB_ 20210910L

# include <pg.h>

# if defined __PG_HAS_NAMESPACES

// The C++ standard requires <cstdlib> for free-standing implementations, 
// but only partialy (see e.g. ISO/IEC 14882:2011 17.6.1.3).
#  if !defined __STDC_HOSTED__ 

#   define EXIT_SUCCESS 0
#   define EXIT_FAILURE 1

namespace std
{
	extern "C" void abort(void) throw () __PG_NORETURN; 
	extern "C" int atexit(void (*)()) throw ();
	extern "C" void exit(int) throw () __PG_NORETURN;
} // namespace std

#  else		// defined __STDC_HOSTED__ 

#   include <stdlib.h>

// Get rid of any conflicting macros defined in <stdlib.h>.

#  undef abort
#  undef abs
#  undef atexit
#  undef atof
#  undef atoi
#  undef atol
#  undef bsearch
#  undef calloc
#  undef div
#  undef exit
#  undef free
#  undef getenv
#  undef labs
#  undef ldiv
#  undef malloc
#  undef mblen
#  undef mbstowcs
#  undef mbtowc
#  undef qsort
#  undef rand
#  undef realloc
#  undef srand
#  undef strtod
#  undef strtol
#  undef strtoul
#  undef system
#  undef wcstombs
#  undef wctomb

namespace std 
{
	using ::div_t;
	using ::ldiv_t;

	using ::abort;
	using ::abs;
	using ::atexit;
	using ::atof;
	using ::atoi;
	using ::atol;
	using ::bsearch;
	using ::calloc;
	using ::div;
	using ::exit;
	using ::free;
	using ::getenv;
	using ::labs;
	using ::ldiv;
	using ::malloc;
	#if defined __PG_HAS_MBSTATE_T
		using ::mblen;
		using ::mbstowcs;
		using ::mbtowc;
	#endif // defined __PG_HAS_MBSTATE_T
	using ::qsort;
	using ::rand;
	using ::realloc;
	using ::srand;
	using ::strtod;
	using ::strtol;
	using ::strtoul;
	using ::system;
	#if __PG_USE_WCHAR_T
		using ::wcstombs;
		using ::wctomb;
	#endif // defined __PG_USE_WCHAR_T
	#if !defined ARDUINO
		inline long
		abs(long __i) { return labs(__i); }
	#endif // !defined ARDUINO
		inline ldiv_t
		div(long __i, long __j) { return ldiv(__i, __j); }

} // namespace std

#  endif	// !defined __STDC_HOSTED__ 

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CSTDLIB_
