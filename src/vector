/*
 *  This file defines a sequence container class that encapsulates dynamic  
 *  size arrays. 
 *
 *  ***************************************************************************
 *
 *  File: vector
 *  Date: March 1, 2025
 *  Version: 1.0
 *  Author: Michael Brodsky
 *  Email: mbrodskiis@gmail.com
 *  Copyright (c) 2012-2025 Michael Brodsky
 *
 *  ***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *  you can redistribute it and/or modify it under the terms of the
 *  GNU General Public License as published by the Free Software Foundation,
 *  either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *  **************************************************************************
 *
 *  Description:
 *
 *    This file defines objects in the <vector> header of the C++ Standard 
 *    Library - to the extent they are supported by the Arduino
 *    implementation. The objects behave according to the C++ ISO/IEC 14882
 *    Standards, except as noted.
 *
 *  **************************************************************************/

#if !defined __PG_VECTOR_
# define __PG_VECTOR_ 20250219L

# include <pg.h>
# include <lib/imath.h>       // ipow2ge()
# include <system/utils.h>    // freeMemory()
# include <new>               // Placement new operators
# include <array>             // Sequence container iterators
# include <allocator>         // std::allocator
# include <initializer_list>  // std::initializer_list

# if defined __PG_HAS_NAMESPACES

namespace std
{
  template <class T, typename Allocator = std::allocator<T>>
  class vector
  {  
    public:
      using self_type = vector<T>;
      using allocator_type = Allocator;
      using value_type = typename allocator_type::value_type;
      using size_type = std::size_t;
      using difference_type = std::ptrdiff_t;
      using reference = value_type&;
      using const_reference = const value_type&;
      using pointer = value_type*;
      using const_pointer = const value_type*;
      using iterator = typename RandomAccessIterator<T>::type;
      using const_iterator = typename ConstRandomAccessIterator<T>::type;
      using reverse_iterator = ReverseIterator<iterator>;
      using const_reverse_iterator = ConstReverseIterator<const_iterator>;

    public:
      vector(Allocator()) {}
      explicit vector(const Allocator& alloc = Allocator());
      explicit vector(size_type, const Allocator& alloc = Allocator());
      vector(size_type, const T&, const Allocator& alloc = Allocator());
      template <class InputIt>
      vector(InputIt, InputIt, const Allocator& alloc = Allocator());
      vector(const vector&);
      vector(vector&&);
      vector(const vector&, const Allocator&);
      vector(vector&&, const Allocator&);
      vector(std::initializer_list<T>, const Allocator& alloc = Allocator());
      ~vector();
      
    public:
      vector&                 operator=(const vector&);
      vector&                 operator=(vector&&);
      vector&                 operator=(std::initializer_list<T>);
      void                    assign(size_type, const_reference);
      template <class InputIt>
      void                    assign(InputIt, InputIt);
      void                    assign(std::initializer_list<T>);
      allocator_type          get_allocator() const;
      reference               operator[](size_type);
      const_reference         operator[](size_type) const;
      reference               front();
      const_reference         front() const;
      reference               back();
      const_reference         back() const;
      pointer                 data();
      const_pointer           data() const;
      void                    clear();
      iterator                erase(iterator);
      iterator                erase(const_iterator);
      iterator                erase(iterator, iterator);
      iterator                erase(const_iterator, const_iterator);
      iterator                insert(const_iterator, const_reference);
      iterator                insert(const_iterator, value_type&&);
      iterator                insert(const_iterator, size_type, const_reference);
      template <class InputIt>
      iterator                insert(const_iterator, InputIt, InputIt);
      iterator                insert(const_iterator, std::initializer_list<T>);
      template <class... Args>
      iterator                emplace(const_iterator, Args&&... args);
      void                    push_back(const_reference);
      void                    push_back(value_type&&);
      void                    pop_back();
      constexpr size_type     capacity() const;
      constexpr size_type     size() const;
      constexpr size_type     max_size() const;
      constexpr bool          empty() const;
      void                    reserve(size_type);
      void                    resize(size_type);
      void                    resize(size_type, const_reference);
      iterator                begin();
      const_iterator          begin() const;
      const_iterator          cbegin() const;
      iterator                end();
      const_iterator          end() const;
      const_iterator          cend() const;
      reverse_iterator        rbegin();
      const_reverse_iterator  rbegin() const;
      const_reverse_iterator  crbegin() const;
      reverse_iterator        rend();
      const_reverse_iterator  rend() const;
      const_reverse_iterator  crend() const;
      void                    swap(vector&);

    private:
      pointer                 allocate(size_type);
      iterator                shift_back(iterator, size_type n = 1);
      
    private:
      T*        data_;
      size_type size_;
      size_type capacity_;
      Allocator alloc_;
  };
} // namespace std

#pragma region vector_ctors

namespace std {

  template <class T, typename Allocator>
  vector<T, Allocator>::vector(const Allocator& alloc) : alloc_(alloc), data_(), capacity_(), size_()
  {
    
  }
  
  template <class T, typename Allocator>
  vector<T, Allocator>::vector(typename vector<T, Allocator>::size_type n, const Allocator& alloc) : alloc_(alloc), data_(alloc_.allocate(n)), 
  capacity_(n), size_(n)  
  {
    std::fill(begin(), end(), T());
  }

  template <class T, typename Allocator>
  vector<T, Allocator>::vector(typename vector<T, Allocator>::size_type n, const T& value, const Allocator& alloc) : alloc_(alloc), 
  data_(alloc_.allocate(n)), capacity_(n), size_(n)  
  {
    std::fill(begin(), end(), value);
  }

  template <class T, typename Allocator>
  template <class InputIt>
  vector<T, Allocator>::vector(InputIt first, InputIt last, const Allocator& alloc) : alloc_(alloc), data_(alloc_.allocate(std::distance(first, last))), 
  capacity_(std::distance(first, last)), size_(std::distance(first, last))
  {
    pointer it = data_;
    
    while(first != last)
      (void)new(it++) T(*first++);
  }

  template <class T, typename Allocator>
  vector<T, Allocator>::vector(const vector<T, Allocator>& other) : alloc_(other.alloc_), data_(alloc_.allocate(other.capacity_)), 
  capacity_(other.capacity_), size_(other.size_)
  {
    std::copy(other.begin(), other.end(), data_);
  }
  
  template <class T, typename Allocator>
  vector<T, Allocator>::vector(vector<T, Allocator>&& other) : alloc_(other.alloc_), data_(other.data_), capacity_(other.capacity_), size_(other.size_)
  {
    other.data_ = nullptr;
    other.size_ = 0;
    other.capacity_ = 0;
  }
  
  template <class T, typename Allocator>
  vector<T, Allocator>::vector(const vector<T, Allocator>& other, const Allocator& alloc) : alloc_(alloc), data_(alloc_.allocate(other.capacity())), 
  capacity_(other.capacity()), size_(other.size())
  {
    std::copy(other.begin(), other.end(), data_);
  }
    
  template <class T, typename Allocator>
  vector<T, Allocator>::vector(vector<T, Allocator>&& other, const Allocator& alloc) : alloc_(alloc), data_(other.data_), 
  capacity_(other.capacity_), size_(other.size_)
  {
    other.data_ = nullptr;
    other.size_ = 0;
    other.capacity_ = 0;
  }

  template <class T, typename Allocator>
  vector<T, Allocator>::vector(std::initializer_list<T> il, const Allocator& alloc) : alloc_(alloc), data_(alloc_.allocate(il.size())), 
  capacity_(il.size()), size_(il.size())
  {
    std::copy(il.begin(), il.end(), data_);
  }
  
  template <class T, typename Allocator>
  vector<T, Allocator>::~vector()
  {
    alloc_.deallocate(data_, capacity_);
  }

# pragma endregion
# pragma public_members

  template <class T, typename Allocator>
  vector<T, Allocator>& vector<T, Allocator>::operator=(const vector<T, Allocator>& other)
  {
    if(this != &other)
    {
      pointer new_data = alloc_.allocate(other.capacity_);
      std::copy(other.data_, other.data_ + other.size_, new_data);
      alloc_.deallocate(data_, capacity_);
      data_ = new_data;
      size_ = other.size_;
      capacity_ = other.capacity_;
    }

    return *this;
  }

  template <class T, typename Allocator>
  vector<T, Allocator>& vector<T, Allocator>::operator=(vector<T, Allocator>&& other)
  {
    if (this != &other)
    {
      alloc_.deallocate(data_, capacity_);
      data_ = other.data_;
      size_ = other.size_;
      capacity_ = other.capacity_;
      other.data_ = nullptr;
      other.size_ = 0;
      other.capacity_ = 0;
    }

    return *this;
  }
  
  template <class T, typename Allocator>
  vector<T, Allocator>& vector<T, Allocator>::operator=(std::initializer_list<T> il)
  {
    pointer new_data = alloc_.allocate(il.size());
    std::copy(il.begin(), il.end(), new_data);
    alloc_.deallocate(data_, capacity_);
    data_ = new_data;
    size_ = il.size();
    capacity_ = il.size();
  }
  
  template <class T, typename Allocator>
  void vector<T, Allocator>::assign(size_type n, const_reference value)
  {
    reserve(n);
    std::fill(data_, data_ + n, value);
    size_ = n;
  }

  template <class T, typename Allocator>
  template <class InputIt>
  void vector<T, Allocator>::assign(InputIt first, InputIt last)
  {
    reserve(std::distance(first, last));
    std::copy(first, last, data_);
    size_ = std::distance(first, last);
  }
  
  template <class T, typename Allocator>
  void vector<T, Allocator>::assign(std::initializer_list<T> il)
  {
    reserve(il.size());
    std::copy(il.begin(), il.end(), data_);
    size_ = il.size();
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::allocator_type vector<T, Allocator>::get_allocator() const
  {
    return alloc_;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::reference vector<T, Allocator>::operator[](size_type n)
  {
    return data_[n];
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reference vector<T, Allocator>::operator[](size_type n) const
  {
    return data_[n];
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::reference vector<T, Allocator>::front()
  {
    return data_[0];
  }

  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reference vector<T, Allocator>::front() const
  {
    return data_[0];
  }

  template <class T, typename Allocator>
  typename vector<T, Allocator>::reference vector<T, Allocator>::back()
  {
    return data_[size_ - 1U];
  }

  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reference vector<T, Allocator>::back() const
  {
    return data_[size_ - 1U];
  }

  template <class T, typename Allocator>
  typename vector<T, Allocator>::pointer vector<T, Allocator>::data()
  {
    return data_;
  }

  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_pointer vector<T, Allocator>::data() const
  {
    return data_;
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::clear()
  {
    erase(begin(), end());
  }

  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::erase(iterator it)
  {
    iterator first = it++;
    std::move(it, end(), first);
    ~T(data_ + --size_);

    return first;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::erase(const_iterator it)
  {
    return erase(const_cast<iterator>(it));
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::erase(iterator first, iterator last)
  {
    size_type old_size = size_;
    
    std::move(last, end(), first);
    size_ -= std::distance(first, last);
    for(size_type sz = size_; sz < old_size; ++sz)
      ~T(data_ + sz);
    
    return first;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::erase(const_iterator first, const_iterator last)
  {
    return erase(const_cast<iterator>(first), const_cast<iterator>(last));
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::insert(const_iterator pos, const_reference value)
  {
    iterator it = shift_back(const_cast<iterator>(pos));    
   
    *it = value;
    
    return it;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::insert(const_iterator pos, value_type&& value)
  {
    iterator it = shift_back(const_cast<iterator>(pos));    
   
    *it = std::move(value);
    
    return it;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::insert(const_iterator pos, size_type n, const_reference value)
  {
    iterator it = shift_back(const_cast<iterator>(pos), n);    

    while(n)
      *(it + --n) = value;
    
    return it;
  }
  
  template <class T, typename Allocator>
  template <class InputIt>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::insert(const_iterator pos, InputIt first, InputIt last)
  {
    iterator it = shift_back(const_cast<iterator>(pos), std::distance(first, last));    

    std::copy(first, last, it);
    
    return it;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::insert(const_iterator pos, std::initializer_list<T> il)
  {
    iterator it = shift_back(const_cast<iterator>(pos), il.size());    

    std::copy(il.begin(), il.end(), it);
    
    return it;
  }
  
  template <class T, typename Allocator>
  template <class... Args>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::emplace(const_iterator, Args&&... args)
  {
    if (size_++ == capacity_) 
      reserve(size_);
    
    return *new (data_ + size_) T(std::forward<Args>(args)...);
  }
  
  template <class T, typename Allocator>
  void vector<T, Allocator>::push_back(typename vector<T, Allocator>::const_reference val)
  {
    if (size_ == capacity_)
      reserve(size_ + 1U);
    data_[size_++] = val;
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::push_back(typename vector<T, Allocator>::value_type&& val)
  {
    if (capacity_ <= size_)
      reserve(size_ + 1U);
    data_[size_++] = val;
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::pop_back()
  {
    size_--;
  }
  
  template <class T, typename Allocator>
  constexpr typename vector<T, Allocator>::size_type vector<T, Allocator>::capacity() const
  {
    return capacity_;
  }
  
  template <class T, typename Allocator>
  constexpr typename vector<T, Allocator>::size_type vector<T, Allocator>::size() const 
  { 
    return size_; 
  } 

  template <class T, typename Allocator>
  constexpr typename vector<T, Allocator>::size_type vector<T, Allocator>::max_size() const
  {
    return static_cast<size_type>((freeMemory() / 2U) / sizeof(T));
  }

  template <class T, typename Allocator>
  constexpr bool vector<T, Allocator>::empty() const
  {
    return size_ == 0;
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::reserve(size_type n)
  {
    if(n > capacity_)
    {
      size_type new_cap = pg::ipow2ge(n);
      data_ = allocate(new_cap);
      capacity_ = new_cap;      
    }
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::resize(size_type n)
  {
    for(size_type i = size_; i < n; ++i)
      push_back(T());
    size_ = n;
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::resize(size_type n, const_reference value)
  {
    for(size_type i = size_; i < n; ++i)
      push_back(value);
    size_ = n;
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::begin()
  {
    return iterator(data_);
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_iterator vector<T, Allocator>::begin() const
  {
    return const_iterator(data_);
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_iterator vector<T, Allocator>::cbegin() const
  {
    return static_cast<const self_type*>(this)->begin();
  } 
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::end()
  {
    return iterator(data_ + size_);
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_iterator vector<T, Allocator>::end() const
  {
    return const_iterator(data_ + size_);
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_iterator vector<T, Allocator>::cend() const
  {
    return static_cast<const self_type*>(this)->end();
  } 
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::reverse_iterator vector<T, Allocator>::rbegin()
  {
    return reverse_iterator(this->end());
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reverse_iterator vector<T, Allocator>::rbegin() const
  {
    return const_reverse_iterator(this->end());
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reverse_iterator vector<T, Allocator>::crbegin() const
  {
    return static_cast<const self_type*>(this)->rbegin();
  } 
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::reverse_iterator vector<T, Allocator>::rend()
  {
    return reverse_iterator(this->begin());
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reverse_iterator vector<T, Allocator>::rend() const
  {
    return const_reverse_iterator(this->begin());
  }
  
  template <class T, typename Allocator>
  typename vector<T, Allocator>::const_reverse_iterator vector<T, Allocator>::crend() const
  {
    return static_cast<const self_type*>(this)->rend();
  }

  template <class T, typename Allocator>
  void vector<T, Allocator>::swap(vector& other)
  {
    std::swap_ranges(this->data_, (this->data_ + size_), other.data_);
  }

# pragma endregion
# pragma private_members

  // Allocates n elements of T and moves the current data to the newly allocated memory, if required.
  template <class T, typename Allocator>
  typename vector<T, Allocator>::pointer vector<T, Allocator>::allocate(typename vector<T, Allocator>::size_type n)
  {
    pointer old_data = data_;
    pointer new_data = alloc_.allocate(n);

    if(old_data)
    {
      if(old_data != new_data)
        new_data = static_cast<pointer>(memmove(static_cast<void*>(new_data), static_cast<void*>(old_data), size_ * sizeof(T)));
      alloc_.deallocate(old_data, capacity_);
    }

    return new_data;
  }

  // Increases the vector size by n and shifts all elements from pos to the end n elements to the right.
  // If the new size is greater than the old capacity, a reallocation occurs.
  template <class T, typename Allocator>
  typename vector<T, Allocator>::iterator vector<T, Allocator>::shift_back(iterator pos, size_type n)
  {
    iterator it = pos;    
    pointer old_data = data_;
    pointer new_data = nullptr;

    size_ += n;
    if(size_ > capacity_) reserve(size_);
    new_data = data_;
    it += std::distance(static_cast<iterator>(old_data), static_cast<iterator>(new_data));
    std::move_backward(it, end(), end() + n);

    return it;
  }

# pragma endregion
# pragma vector_nonmember-functions

# pragma endregion

} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error Requires C++11 and named namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_VECTOR_
