/*
 *	This file is part of the C++ Standard Library C-style null-terminated
 *	wide and multi-byte strings library.
 *
 *  ***************************************************************************
 *
 *	File: cwchar
 *	Date: September 10, 2021
 *	Version: 1.0
 *	Author: Michael Brodsky
 *	Email: mbrodskiis@gmail.com
 *	Copyright (c) 2012-2022 Michael Brodsky
 *
 *	***************************************************************************
 *
 *  This file is part of "Pretty Good" (Pg). "Pg" is free software:
 *	you can redistribute it and/or modify it under the terms of the
 *	GNU General Public License as published by the Free Software Foundation,
 *	either version 3 of the License, or (at your option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *	along with this file. If not, see <http://www.gnu.org/licenses/>.
 *
 *	**************************************************************************
 *
 *	Description:
 *
 *		This file defines objects in the <cwchar> header of the C++ Standard
 *		Library, to the extent they are supported by the Arduino
 *		implementation. The objects behave according to the C++ ISO/IEC 14882
 *		Standards, except as noted.
 *
 *	Notes:
 *
 *		This header was originally in the C standard library as <wchar.h>.
 * 
 *	Credits:
 * 
 *		This file is based in part on the GNU ISO C++ Library, Copyright (C) 
 *		1997-2017 Free Software Foundation, Inc.
 *
 *	**************************************************************************/

#if !defined __PG_CWCHAR_
# define __PG_CWCHAR_ 20210910L

# include <pg.h>

# if defined __PG_HAS_NAMESPACES

#  if __PG_HAS_WCHAR_H
#   include <wchar.h>
#  endif // __PG_HAS_WCHAR_H

#  if !defined __PG_HAS_MBSTATE_T
extern "C"
{
	typedef struct
	{
		int __fill[6];
	} mbstate_t;
}
#  endif // !defined __PG_HAS_MBSTATE_T

namespace std
{
	using ::mbstate_t;
} // namespace std

// Get rid of any conflicting macros defined in <wchar.h>.

#  undef btowc
#  undef fgetwc
#  undef fgetws
#  undef fputwc
#  undef fputws
#  undef fwide
#  undef fwprintf
#  undef fwscanf
#  undef getwc
#  undef getwchar
#  undef mbrlen
#  undef mbrtowc
#  undef mbsinit
#  undef mbsrtowcs
#  undef putwc
#  undef putwchar
#  undef swprintf
#  undef swscanf
#  undef ungetwc
#  undef vfwprintf
#  if __PG_HAS_VFWSCANF
#   undef vfwscanf
#  endif
#  undef vswprintf
#  if __PG_HAS_VSWSCANF
#   undef vswscanf
#  endif
#  undef vwprintf
#  if __PG_HAS_VWSCANF
#   undef vwscanf
#  endif
#  undef wcrtomb
#  undef wcscat
#  undef wcschr
#  undef wcscmp
#  undef wcscoll
#  undef wcscpy
#  undef wcscspn
#  undef wcsftime
#  undef wcslen
#  undef wcsncat
#  undef wcsncmp
#  undef wcsncpy
#  undef wcspbrk
#  undef wcsrchr
#  undef wcsrtombs
#  undef wcsspn
#  undef wcsstr
#  undef wcstod
#  if __PG_HAS_WCSTOF
#   undef wcstof
#  endif
#  undef wcstok
#  undef wcstol
#  undef wcstoul
#  undef wcsxfrm
#  undef wctob
#  undef wmemchr
#  undef wmemcmp
#  undef wmemcpy
#  undef wmemmove
#  undef wmemset
#  undef wprintf
#  undef wscanf


namespace std 
{
#  if __PG_USE_WCHAR_T

	using ::wint_t;

	using ::btowc;
	using ::fgetwc;
	using ::fgetws;
	using ::fputwc;
	using ::fputws;
	using ::fwide;
	using ::fwprintf;
	using ::fwscanf;
	using ::getwc;
	using ::getwchar;
	using ::mbrlen;
	using ::mbrtowc;
	using ::mbsinit;
	using ::mbsrtowcs;
	using ::putwc;
	using ::putwchar;
	#if !defined __PG_HAS_BROKEN_VSWPRINTF
		using ::swprintf;
	#endif
	using ::swscanf;
	using ::ungetwc;
	using ::vfwprintf;
	#if __PG_HAS_VFWSCANF
		using ::vfwscanf;
	#endif
	#ifndef __PG_HAS_BROKEN_VSWPRINTF
		using ::vswprintf;
	#endif
	#if __PG_HAS_VSWSCANF
		using ::vswscanf;
	#endif
	using ::vwprintf;
	#if __PG_HAS_VWSCANF
		using ::vwscanf;
	#endif
	using ::wcrtomb;
	using ::wcscat;
	using ::wcscmp;
	using ::wcscoll;
	using ::wcscpy;
	using ::wcscspn;
	using ::wcsftime;
	using ::wcslen;
	using ::wcsncat;
	using ::wcsncmp;
	using ::wcsncpy;
	using ::wcsrtombs;
	using ::wcsspn;
	using ::wcstod;
	#if __PG_HAS_WCSTOF
		using ::wcstof;
	#endif
	using ::wcstok;
	using ::wcstol;
	using ::wcstoul;
	using ::wcsxfrm;
	using ::wctob;
	using ::wmemcmp;
	using ::wmemcpy;
	using ::wmemmove;
	using ::wmemset;
	using ::wprintf;
	using ::wscanf;
	using ::wcschr;
	using ::wcspbrk;
	using ::wcsrchr;
	using ::wcsstr;
	using ::wmemchr;

#	if !defined __CORRECT_ISO_CPP_WCHAR_H_PROTO
inline wchar_t*
wcschr(wchar_t* __p, wchar_t __c)
{ return wcschr(const_cast<const wchar_t*>(__p), __c); }

inline wchar_t*
wcspbrk(wchar_t* __s1, const wchar_t* __s2)
{ return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

inline wchar_t*
wcsrchr(wchar_t* __p, wchar_t __c)
{ return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

inline wchar_t*
wcsstr(wchar_t* __s1, const wchar_t* __s2)
{ return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

inline wchar_t*
wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
{ return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }
#	endif // !defined __CORRECT_ISO_CPP_WCHAR_H_PROTO

#  endif // __PG_USE_WCHAR_T
} // namespace std

# else // !defined __PG_HAS_NAMESPACES
#  error requires namespace support.
# endif // defined __PG_HAS_NAMESPACES

#endif // !defined __PG_CWCHAR_
